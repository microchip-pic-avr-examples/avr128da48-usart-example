
avr128da48-usart-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00804000  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000337a  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e03  00000000  00000000  00003662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047e  00000000  00000000  00006465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000068e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017c0  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000081d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  94:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  98:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  9c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  ac:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  bc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  cc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  d0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  d4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  d8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  dc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  e0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  e4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  e8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_copy_data>:
  f8:	10 e4       	ldi	r17, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	ea eb       	ldi	r30, 0xBA	; 186
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a0 31       	cpi	r26, 0x10	; 16
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>
 112:	0e 94 cb 00 	call	0x196	; 0x196 <main>
 116:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <USART1_init>:
void USART1_sendChar(char c);
void USART1_sendString(char *str);

void USART1_init(void)
{
    PORTC.DIRSET = PIN0_bm;                             /* set pin 0 of PORT C (TXd) as output*/
 11e:	e0 e4       	ldi	r30, 0x40	; 64
 120:	f4 e0       	ldi	r31, 0x04	; 4
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	81 83       	std	Z+1, r24	; 0x01
    PORTC.DIRCLR = PIN1_bm;                             /* set pin 1 of PORT C (RXd) as input*/
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	82 83       	std	Z+2, r24	; 0x02
    
    USART1.BAUD = (uint16_t)(USART1_BAUD_RATE(9600));   /* set the baud rate*/
 12a:	e0 e2       	ldi	r30, 0x20	; 32
 12c:	f8 e0       	ldi	r31, 0x08	; 8
 12e:	83 e8       	ldi	r24, 0x83	; 131
 130:	96 e0       	ldi	r25, 0x06	; 6
 132:	80 87       	std	Z+8, r24	; 0x08
 134:	91 87       	std	Z+9, r25	; 0x09
    
    USART1.CTRLC = USART_CHSIZE0_bm
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	87 83       	std	Z+7, r24	; 0x07
                 | USART_CHSIZE1_bm;                    /* set the data format to 8-bit*/
                 
    USART1.CTRLB |= USART_TXEN_bm;                      /* enable transmitter*/
 13a:	86 81       	ldd	r24, Z+6	; 0x06
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	86 83       	std	Z+6, r24	; 0x06
 140:	08 95       	ret

00000142 <USART1_sendChar>:
}

void USART1_sendChar(char c)
{
    while(!(USART1.STATUS & USART_DREIF_bm))
 142:	e0 e2       	ldi	r30, 0x20	; 32
 144:	f8 e0       	ldi	r31, 0x08	; 8
 146:	94 81       	ldd	r25, Z+4	; 0x04
 148:	95 ff       	sbrs	r25, 5
 14a:	fd cf       	rjmp	.-6      	; 0x146 <USART1_sendChar+0x4>
    {
        ;
    }
    
    USART1.TXDATAL = c;
 14c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
 150:	08 95       	ret

00000152 <USART1_sendString>:
}

void USART1_sendString(char *str)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
 160:	7c 01       	movw	r14, r24
    for(size_t i = 0; i < strlen(str); i++)    
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	06 c0       	rjmp	.+12     	; 0x174 <USART1_sendString+0x22>
    {        
        USART1_sendChar(str[i]);    
 168:	f7 01       	movw	r30, r14
 16a:	81 91       	ld	r24, Z+
 16c:	7f 01       	movw	r14, r30
 16e:	0e 94 a1 00 	call	0x142	; 0x142 <USART1_sendChar>
    USART1.TXDATAL = c;
}

void USART1_sendString(char *str)
{
    for(size_t i = 0; i < strlen(str); i++)    
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	f8 01       	movw	r30, r16
 176:	01 90       	ld	r0, Z+
 178:	00 20       	and	r0, r0
 17a:	e9 f7       	brne	.-6      	; 0x176 <USART1_sendString+0x24>
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	e0 1b       	sub	r30, r16
 180:	f1 0b       	sbc	r31, r17
 182:	ce 17       	cp	r28, r30
 184:	df 07       	cpc	r29, r31
 186:	80 f3       	brcs	.-32     	; 0x168 <USART1_sendString+0x16>
    {        
        USART1_sendChar(str[i]);    
    }
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <main>:

int main(void)
{
    USART1_init();
 196:	0e 94 8f 00 	call	0x11e	; 0x11e <USART1_init>
    
    while (1) 
    {
        USART1_sendString("Hello World!\r\n");
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e4       	ldi	r25, 0x40	; 64
 19e:	0e 94 a9 00 	call	0x152	; 0x152 <USART1_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	84 e3       	ldi	r24, 0x34	; 52
 1a6:	9c e0       	ldi	r25, 0x0C	; 12
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x12>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x1c>
 1b2:	00 00       	nop
 1b4:	f2 cf       	rjmp	.-28     	; 0x19a <main+0x4>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
